package tech.tora.quaver;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.json.simple.parser.ParseException;

import tech.tora.quaver.notepad.Notepad;
import tech.tora.tools.system.log.Logging;

public class Launcher {

	public Launcher() {
		
		Build build = readBuildProperties();

		System.out.print("Launching " + build.name());
		System.out.println(" M" + build.release() +"."+ build.major() + " r" + build.minor());
		System.out.println("OS: " + System.getProperty("os.name"));

		if (System.getProperty("os.name").contains("Mac")) initMac();
		
		if (!initLookAndFeel()) Launcher.exit(1, "Failed look and feel in Launcher.java");

		if (new File("res" + File.separator + "config.json").exists()) {
			Configuration c = null;
			try {
				c = Configuration.readConfigJSON();
			} catch (FileNotFoundException e) {
				Logging.errorMessage(1, null, "Configuration Read Error", "Configuration file was not found", e);
			} catch (IOException e) {
				Logging.errorMessage(1, null, "Configuration Read Error", "Failed or interrupted I/O operations on configuration read", e);
			} catch (ParseException e) {
				Logging.errorMessage(1, null, "Configuration Read Error", "Failed to read config file", e);
			}
			new Notepad(c, build.release(), build.major(), build.minor());
		} else {
			new Notepad(null, build.release(), build.major(), build.minor());
		}

	}

	private Build readBuildProperties() {
		
		Properties prop = new Properties();
		InputStream input = null;

		try {

			input = Launcher.class.getResourceAsStream("/quaver.properties");
			prop.load(input);

			String projectName = prop.getProperty("project.name");
			int buildRelease = Integer.parseInt(prop.getProperty("build.release"));
			int buildMajor = Integer.parseInt(prop.getProperty("build.major"));
			int buildMinor = Integer.parseInt(prop.getProperty("build.minor"));

			return new Build(projectName, buildRelease, buildMajor, buildMinor);
			
		} catch (IOException ex) {
			Logging.errorMessage(1, null, "Failed to initialise properties", "Failed to read the properties file generated by the ant build script", ex);
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		return null;
		
	}

	private boolean initLookAndFeel() {

		try {
			UIManager.setLookAndFeel(
					UIManager.getSystemLookAndFeelClassName());
			return true;
		} 
		catch (UnsupportedLookAndFeelException e) {
			Logging.error(1, "Unsupported Look and Feel Exception", "Failed to initialise look and feel", e);
		}
		catch (ClassNotFoundException e) {
			Logging.error(1, "Class Not Found Exception", "Failed to initialise look and feel", e);
		}
		catch (InstantiationException e) {
			Logging.error(1, "Instantiation Exception", "Failed to initialise look and feel", e);
		}
		catch (IllegalAccessException e) {
			Logging.error(1, "Illegal Access Exception", "Failed to initialise look and feel", e);
		}
		
		return false;
		
	}

	private void initMac() {
		System.setProperty("com.apple.mrj.application.apple.menu.about.name", "Quaver");
		System.setProperty("apple.awt.fileDialogForDirectories", "true");
		System.setProperty("apple.laf.useScreenMenuBar", "true");
	}

	public boolean fileExists(String location) {
		File f = new File(location);
		if(f.exists() && !f.isDirectory()) return true;
		else return false;
	}

	public static void main(String[] args) {
		new Launcher();
	}

	/**
	 * Terminate runtime
	 * @param status - ( 0 - Success, 1 - Failed )
	 * @param reason - Cause of termination
	 */
	public static void exit(int status, String reason) {
		System.err.println("Exiting: " + reason);
		System.exit(status);
	}

}
